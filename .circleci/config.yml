version: 2.1

jobs:
  refresh_tools_cache:
    resource_class: small
    docker:
      - image: circleci/python:3.6.6 # aws cli dependency pyaml does not yet support 3.7 - https://github.com/aws/aws-cli/issues/3427
    steps:
      - checkout
      - run: sudo pip install awscli==1.18.48
      - run: |
          # if this is a forked PR, stop this step;
          # community contributors won't have perms to upload to our S3 bucket

          if [[ $CIRCLE_PR_REPONAME == "circleci-images" ]]; then
            echo "this is a forked PR; skipping rest of this step"
            circleci step halt
            exit 0
          fi

          cd ./shared/images; ./refresh-tools-cache

  publish_image: &publish_image
    machine:
      image: ubuntu-1604:202004-01
    working_directory: ~/circleci-bundles
    shell: /bin/bash -eol pipefail
    parameters:
      scheduled-workflow:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Docker Login
          command: |
            # if this is a forked PR, skip Docker login;
            # community contributors won't have our Docker perms

            if [[ $CIRCLE_PR_REPONAME == "circleci-images" ]]; then
              echo "this is a forked PR; skipping Docker login"
            else
              docker login -u $DOCKER_USER -p $DOCKER_PASS
            fi

      - attach_workspace:
          at: workspace

      - run:
          name: only proceed if `$PLATFORM` or `shared` or `Makefile` were modified (unless we're on master)
          command: |
            # Sometimes we have the "compare-url" functionality off. If so, the
            # file below won't exists. If that's the case, skip it.
            if [ ! -f workspace/CIRCLE_COMPARE_URL.txt ]; then
              exit 0
            fi

            # save value stored in file to a local env var
            CIRCLE_COMPARE_URL=$(cat workspace/CIRCLE_COMPARE_URL.txt)

            # borrowed from https://discuss.circleci.com/t/does-circleci-2-0-work-with-monorepos

            COMMIT_RANGE=$(echo $CIRCLE_COMPARE_URL | sed 's:^.*/compare/::g')
            echo "Commit range: $COMMIT_RANGE"

            # if this is a forked PR, skip commit range logic; it doesn't handle forks well,
            # plus we likely want to always build all images on forks anyway,
            # to help community members assess their PRs and ultimately
            # be able to make meaningful contributions to the repo

            if [[ $CIRCLE_PR_REPONAME == "circleci-images" ]]; then
              echo "this is a forked PR; building/testing all images"
            else
              if [[ ! $(git diff $COMMIT_RANGE --name-status | grep -e "$PLATFORM" -e "shared" -e "Makefile") && "$CIRCLE_BRANCH" != "master" ]]; then
                circleci step halt
              fi
            fi

      - run:
          name: Install goss & dgoss (orbify this later)
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path

            # can't set these as normal job env vars, b/c they're overridden by the env section in the platform-specific jobs
            export GOSS_DST=~/bin

            curl -fsSL https://goss.rocks/install | sh
            goss -version

      - run:
          name: setup test results dir
          command: |
            mkdir test-results

      - run:
          name: Build, Test, Publish Images
          no_output_timeout: 20m
          command: |
            export COMPUTED_ORG=ccitest
            if [[ "$CIRCLE_BRANCH" == "master" ]]; then
              export COMPUTED_ORG=circleci
            elif [[ "$CIRCLE_BRANCH" == "staging" ]]; then
              export COMPUTED_ORG=ccistaging
            fi
            export NEW_ORG=${NEW_ORG:-$COMPUTED_ORG}

            export GOSS_FILES_PATH=~/circleci-bundles/$PLATFORM
            export GOSS_FILES_STRATEGY=cp
            export GOSS_SLEEP=1s

            # setup test results for $PLATFORM
            mkdir test-results/$PLATFORM

            # push images by default
            export PUSH_IMAGES=true

            # forked PR? set PUSH_IMAGES to false (build/test but don't push)
            # community contributors won't have perms to push to our docker hub
            if [[ $CIRCLE_PR_REPONAME == "circleci-images" ]]; then
              export PUSH_IMAGES=false
              echo "forked PR: building/testing images; skipping docker push"
            fi

            # add -w -d for debug info
            make -j -w -d $PLATFORM/publish_images

      - store_artifacts:
          path: "."
          destination: circleci-bundles

      - store_test_results:
          path: test-results

  publish_android:
    <<: *publish_image
    parallelism: 8 # don't increase or decrease this, it correlates to the number of API versions we build in android/generate images
    environment:
      - PLATFORM: android

  publish_buildpack-deps:
    <<: *publish_image
    parallelism: 8
    environment:
      - PLATFORM: buildpack-deps

  publish_clojure:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: clojure

  publish_dynamodb:
    <<: *publish_image
    environment:
      - PLATFORM: dynamodb

  publish_elixir:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: elixir

  publish_golang:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: golang

  publish_jruby:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: jruby

  publish_mariadb:
    <<: *publish_image
    environment:
      - PLATFORM: mariadb

  publish_mongo:
    <<: *publish_image
    environment:
      - PLATFORM: mongo

  publish_mysql:
    <<: *publish_image
    environment:
      - PLATFORM: mysql

  publish_node:
    <<: *publish_image
    parallelism: 4
    environment:
      - PLATFORM: node

  publish_openjdk:
    <<: *publish_image
    parallelism: 2
    environment:
      - PLATFORM: openjdk

  publish_php:
    <<: *publish_image
    parallelism: 12
    environment:
      - PLATFORM: php

  publish_postgres:
    <<: *publish_image
    environment:
      - PLATFORM: postgres

  publish_python:
    <<: *publish_image
    parallelism: 8
    environment:
      - PLATFORM: python

  publish_redis:
    <<: *publish_image
    environment:
      - PLATFORM: redis

  publish_ruby:
    <<: *publish_image
    parallelism: 3
    environment:
      - PLATFORM: ruby

  publish_rust:
    <<: *publish_image
    environment:
      - PLATFORM: rust

  publish_erlang:
    <<: *publish_image
    environment:
      - PLATFORM: erlang

  prune_tags:
    # This job will run regularly in order to delete Docker tags that we're
    # not using. This will help keep the amount of Docker Hub storage we're
    # using at a controlled level.
    docker:
      - image: cimg/base:2020.08
    parameters:
      images:
        description: "The images whose tags are to be deleted, comma separated."
        type: string
      duration:
        description: "The amount of days of which to delete a tag."
        type: string
    steps:
      - run:
          name: "Install Sonar"
          command: |
            SONAR_VER=0.7.0
            SONAR_URL="https://github.com/felicianotech/sonar/releases/download/v${SONAR_VER}/sonar-v${SONAR_VER}-linux-amd64.tar.gz"
            curl -sSL $SONAR_URL | sudo tar -xz -C /usr/local/bin sonar
      - run:
          name: "Delete Tags"
          command: |
            IFS=',' read -r -a images \<<< "<< parameters.images >>"
            for image in "${images[@]}"
            do
              sonar tags delete --yes --gt=<< parameters.duration >> --field=date $image
            done

cron_workflow_filters: &cron_workflow_filters
  scheduled-workflow: true

commit_workflow_filters: &commit_workflow_filters
  scheduled-workflow: false

workflows:
  build_test_deploy_timeline1:
    triggers:
      - schedule:
          # on the 18th of the month
          cron: "0 0 18 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - publish_android:        *cron_workflow_filters
      - publish_node:           *cron_workflow_filters
      - publish_python:         *cron_workflow_filters
      - publish_ruby:           *cron_workflow_filters
      - publish_golang:         *cron_workflow_filters
      - publish_php:            *cron_workflow_filters
      - publish_postgres:       *cron_workflow_filters
      - publish_elixir:         *cron_workflow_filters
      - publish_jruby:          *cron_workflow_filters
      - publish_openjdk:        *cron_workflow_filters
      - publish_rust:           *cron_workflow_filters
      - publish_buildpack-deps: *cron_workflow_filters
      - publish_erlang:         *commit_workflow_filters

  build_test_deploy_timeline2:
    triggers:
      - schedule:
          # 1st of month
          cron: "0 0 1 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - publish_redis:          *cron_workflow_filters
      - publish_mariadb:        *cron_workflow_filters
      - publish_mysql:          *cron_workflow_filters
      - publish_mongo:          *cron_workflow_filters
      - publish_elixir:         *cron_workflow_filters
      - publish_clojure:        *cron_workflow_filters
      - publish_dynamodb:       *cron_workflow_filters
  build_test_deploy_timeline3:
    triggers:
      - schedule:
          # 15th of month
          cron: "0 0 15 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - publish_redis:          *cron_workflow_filters
      - publish_mariadb:        *cron_workflow_filters
      - publish_mysql:          *cron_workflow_filters
      - publish_mongo:          *cron_workflow_filters
      - publish_elixir:         *cron_workflow_filters
      - publish_clojure:        *cron_workflow_filters
      - publish_dynamodb:       *cron_workflow_filters

  commit:
    jobs:
      #- circle-compare-url/reconstruct:
      #    name: reconstruct_compare_url
      #    resource-class: small
      - publish_android:        *commit_workflow_filters
      - publish_node:           *commit_workflow_filters
      - publish_python:         *commit_workflow_filters
      - publish_ruby:           *commit_workflow_filters
      - publish_golang:         *commit_workflow_filters
      - publish_php:            *commit_workflow_filters
      - publish_redis:          *commit_workflow_filters
      - publish_postgres:       *commit_workflow_filters
      - publish_mariadb:        *commit_workflow_filters
      - publish_mysql:          *commit_workflow_filters
      - publish_mongo:          *commit_workflow_filters
      - publish_elixir:         *commit_workflow_filters
      - publish_jruby:          *commit_workflow_filters
      - publish_clojure:        *commit_workflow_filters
      - publish_openjdk:        *commit_workflow_filters
      - publish_rust:           *commit_workflow_filters
      - publish_dynamodb:       *commit_workflow_filters
      - publish_buildpack-deps: *commit_workflow_filters
      - publish_erlang:         *commit_workflow_filters
